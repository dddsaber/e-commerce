import { instance } from "."; // Gi·∫£ s·ª≠ instance ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr∆∞·ªõc ƒë√≥
import { Store, GetStoresRequest, TaxInformation } from "../type/store.type"; // ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu Store v√† GetStoresRequest
import { handleApiError } from "../utils/handle_error_func";

const URL = "/store";

// üü¢ L·∫•y danh s√°ch c√°c store
export const getStores = async (
  params: GetStoresRequest
): Promise<{ stores: Store[]; totalStores: number }> => {
  try {
    const response = await instance.post<{
      stores: Store[];
      totalStores: number;
    }>(`${URL}/get-stores`, params);
    if (response.status) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng
      return response.data;
    } else {
      handleApiError(new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch store"));
      return { stores: [], totalStores: 0 };
    }
  } catch (error: unknown) {
    handleApiError(error);
    return { stores: [], totalStores: 0 };
  }
};

// üü¢ T·∫°o m·ªõi store
export const createStore = async (body: Store): Promise<Store> => {
  try {
    const response = await instance.post<Store>(`${URL}/create`, body);
    if (response.status) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng
      return response.data;
    } else {
      handleApiError(new Error("Kh√¥ng th·ªÉ t·∫°o store"));
      return {} as Store;
    }
  } catch (error: unknown) {
    handleApiError(error);
    return {} as Store;
  }
};

// üü¢ T·∫°o m·ªõi store
export const storeInfoRegistration = async (body: Store): Promise<Store> => {
  try {
    const response = await instance.post<Store>(
      `${URL}/registration-store-info`,
      body
    );
    if (response.status) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng
      return response.data;
    } else {
      handleApiError(new Error("Kh√¥ng th·ªÉ t·∫°o store"));
      return {} as Store;
    }
  } catch (error: unknown) {
    handleApiError(error);
    return {} as Store;
  }
};

// üü¢ T·∫°o m·ªõi store
export const storeTaxRegistration = async (
  storeId: string,
  body: TaxInformation
): Promise<Store> => {
  try {
    const response = await instance.post<Store>(
      `${URL}/${storeId}/registration-store-tax`,
      body
    );
    if (response.status) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng
      return response.data;
    } else {
      handleApiError(new Error("Kh√¥ng th·ªÉ t·∫°o store"));
      return {} as Store;
    }
  } catch (error: unknown) {
    handleApiError(error);
    return {} as Store;
  }
};

// üü¢ T·∫°o m·ªõi store
export const storeIdentityRegistration = async (
  storeId: string,
  userId: string,
  body: Store
): Promise<Store> => {
  try {
    const response = await instance.post<Store>(
      `${URL}/${storeId}/${userId}/registration-store-identity`,
      body
    );
    if (response.status) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng
      return response.data;
    } else {
      handleApiError(new Error("Kh√¥ng th·ªÉ t·∫°o store"));
      return {} as Store;
    }
  } catch (error: unknown) {
    handleApiError(error);
    return {} as Store;
  }
};

// üü¢ C·∫≠p nh·∫≠t th√¥ng tin store
export const updateStoreInformation = async (
  body: Partial<Store>
): Promise<Store> => {
  try {
    const response = await instance.put<Store>(
      `${URL}/${body._id}/update-info`,
      body
    );
    if (response.status) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng
      return response.data;
    } else {
      handleApiError(new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin store"));
      return {} as Store;
    }
  } catch (error: unknown) {
    handleApiError(error);
    return {} as Store;
  }
};

// üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i store (ho·∫°t ƒë·ªông / kh√¥ng ho·∫°t ƒë·ªông)
export const updateStoreStatus = async (
  id: string,
  status: boolean
): Promise<Store> => {
  try {
    const response = await instance.put<Store>(
      `${URL}/${id}/update-store-status`,
      {
        status,
      }
    );
    if (response.status) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng
      return response.data;
    } else {
      handleApiError(new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i store"));
      return {} as Store;
    }
  } catch (error: unknown) {
    handleApiError(error);
    return {} as Store;
  }
};

// üü¢ L·∫•y th√¥ng tin store theo ID
export const getStoreById = async (id: string): Promise<Store> => {
  try {
    const response = await instance.get<Store>(`${URL}/${id}`);
    if (response.status) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng

      return response.data;
    } else {
      handleApiError(new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin store"));
      return {} as Store;
    }
  } catch (error: unknown) {
    handleApiError(error);
    return {} as Store;
  }
};

// üü¢ L·∫•y th√¥ng tin store theo userId
export const getStoreByUserId = async (userId: string): Promise<Store> => {
  try {
    const response = await instance.get<Store>(`${URL}/user/${userId}`);
    if (response.status && response.data) {
      // Ki·ªÉm tra n·∫øu response th√†nh c√¥ng

      return response.data;
    } else {
      return {} as Store;
    }
  } catch (error: unknown) {
    handleApiError(error);
    return {} as Store;
  }
};
